% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/htbGetDb.R
\name{htbGetDb}
\alias{htbGetDb}
\title{Extractor for htbDb object}
\usage{
htbGetDb(filename, ecode = NULL, remake = FALSE)
}
\arguments{
\item{filename}{A string. The name of the htb file.
The extension (.htb or .RData) can be omitted.}

\item{ecode}{A string. The name of a text file to designate
the correspondency between event codes and names.
The file must be a tab-separated two-columnar table
of which the first column contains glob expression of the
event codes and the second column contains the corresponding
event names.}

\item{remake}{A logical. Whether to re-extract \code{htbDb} object
from an htb file even if an RData is available.}
}
\value{
A list of \code{htbDb} objects.
The length of the list is the number of databases existed
in the original htb file. (See Details.)
}
\description{
Extracts htbDb object from an htb file or existing RData file.
}
\details{
TEMPO system may store several numbers of htb files
in one session of recording.
To read out the contents of these htb files,
you have to complete the following steps:
open up a connection to an htb file,
count the number of database contained in it,
read the header information out,
extract the data,
and finally close the connection.
This may sound tiring for people with
less experience in programming.
In addition, the binary format of htb files for spike and event
data is extremely redundant with massive zero-fillings.
It causes a long waiting time when you want to
extract the contents of htb files upon every analysis.

\code{\link[=htbGetDb]{htbGetDb()}} provides an easy way to carry out these
bothersome data extraction.
All you have to do is just designate the name of an htb file.
\code{\link[=htbGetDb]{htbGetDb()}} extracts data from the designated htb file,
and creates \code{htbDb} objects.
This is the most basic form of data in htb package.
Each \code{htbDb} object is a list, containing the data
for all the channels in the original database.
(See the following section for detailed information about
the data format of htb files.)
Because an htb file can contain multiple databases,
the value returned by \code{\link[=htbGetDb]{htbGetDb()}}
is a list of \code{htbDb} objects (instead of a single \code{htbDb} object).
This is always true even when only one database is extracted.
In such cases, a list of length one will be returned,
of whose the only content is an \code{htbDb} object.

\code{\link[=htbGetDb]{htbGetDb()}} automatically saves the \code{htbDb} objects as RData file,
in the same directory and as the same name to
the original htb file.
This RData file will be loaded and returned by \code{\link[=htbGetDb]{htbGetDb()}}
next time you request the same data.
Therefore, after you have once extracted the data from
htb files with \code{\link[=htbGetDb]{htbGetDb()}},
the time needed for the data extraction will be reduced
in the next time, because it actually does not reads the data from
htb files but from RData files.
}
\section{General organization of an htb file}{

The format of htb files may seem to be a bit complicated,
especially for those unfamiliar to TEMPO system.
The author personally does not think that
the deep understanding on these formats is mandatory for everyone.
However, a basic knowledge about how neuronal activities
are stored in data files would anyway help,
regardless of whether you use actual TEMPO system or not.
Thus here I briefly mention the very basic of htb files,
and how they are handled in this package.
If you need more detailed information,
you can learn the binary format of htb files in TEMPO's reference manual.

First of all, the unit of information stored with TEMPO system
is an htb file, a binary file with .htb extension.
In a given htb file, there can be a set of
multiple experimental data called \emph{databases}.
A database is a bundle of data with same data type,
which is one of the three possible types:
\code{spike}, \code{event} or \code{analog}.
As the names literally tell,
the type of a database indicate what type of information
is stored in that database.
Spike databases contain spike timing information.
Event databases contain timing information of certain events
in the experiment, as well as the codes to show
which event took place.
Analog databases contain continuous sequence of analog values,
recorded as a transition of voltage loaded on A/D converter board.
Details of each data type are subsequently mentioned.

The type of a database must be one of the three types above.
Other types are not accepted in TEMPO system,
and a database has one and only one data type from those three.
However, as mentioned before, an htb file can contain
multiple databases, and they can have different types.
This way TEMPO system can bundle up different types of
experimental data into one htb file.

A database, in turn, is composed of a MxN matrix,
where M is the number of data points,
and N is the number of data's input streams which are called \emph{channels}.
A channel contains spiking of one isolated single neuron
in spike database,
and voltage input from one A/D board's input pin
in analog database.
Event database can also contain multiple channels.
For example, the first channel of an event database
is used to marker the timings of major events in the experiment
(e.g., trial start, response, reward delivery, etc...),
whereas the second channel stores additional information
about the observed events
(e.g., serial number of the trial, response time, amout of reward, etc...).

Taken together, an htb file may be composed of
multiple databases that can (but not necessarily need to) be
different types,
and each database may be composed of one or more channels.
For example, imagine that your experiment consists of
simultaneous recording of
up to 20 isolated spiking activities,
one event sequence for data alignment,
and two analog values that corresponds to the x and y coordinates
of the eye position.
Each of the three types of data must be stored in separate
databases with \code{spike}, \code{event} and \code{analog} data types,
but can be still held in one htb file.

In addition, an \code{htbDb} object for event database
has another special channel named \code{time}.
Those types of database is converted to \emph{time encoding}
forms by \code{\link[=htbGetDb]{htbGetDb()}}, so this \code{time} channel is necessary.
nuro nuro
aaa. aas.

subsection megassa
bbs  a a.
bbs  a ccc
}

\examples{
  \dontrun{
  db <- htbGetDb("an_htb_file.htb")
  }

}
\keyword{IO}
