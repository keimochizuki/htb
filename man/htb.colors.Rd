% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/htb.colors.R
\name{htb.colors}
\alias{htb.colors}
\title{Visually friendly color palette}
\usage{
htb.colors(n, type = "rainbow")
}
\arguments{
\item{n}{An integer. The number of colors (>= 1)
to be in the palette.}

\item{type}{A string. The type of the color set.
Default \code{rainbow} produces rainbow-like colors.
Other available types are \code{bruna} and \code{imas}.}
}
\value{
Strings. A vector of color codes in \verb{#xxxxxx} format.
}
\description{
Create a vector of n contiguous colors.
}
\details{
When visualizing data in a graphical plot,
R's built-in \code{\link[grDevices:palettes]{grDevices::rainbow()}} function is
one of the best and handiest tools to create colors to use.
However, when creating a small number of (say, 4 or 5)
colors for categorical data groups,
the result sometimes contains indistinct colors
such as highly bright cyan or yellow.
\code{\link[=htb.colors]{htb.colors()}} deals with this problem,
by using a predetermined set of rainbow-like,
visually friendly colors.
Those colors are carefully chosen with a wish that
they be better distinguished
even in case of achromatopsia.
This may be especially useful when the number
of colors are relatively few (e.g., < 10).
When the number is large,
the results of \code{\link[grDevices:palettes]{grDevices::rainbow()}} and \code{\link[=htb.colors]{htb.colors()}}
will not differ so much,
though the latter will be still a bit quiet (unvivid)
compared with the former.

In case of conditions you want non-rainbow colors,
\code{\link[=htb.colors]{htb.colors()}} can also produce different set of color types,
which you might have happened to see elsewhere.
Those colors are not cared for discriminability,
so please be cautious.
}
\examples{
piecol <- function(x) {
  pie(rep(1, length(x)), labels = rep("", length(x)),
    col = x, border = NA, radius = 0.95)
}

par(mfrow = c(4, 5), mar = rep(0.1, 4))
for (f in c(grDevices::rainbow, htb.colors)) {
  sapply(X = c(1:9, 30), FUN = function(n) {
    piecol(f(n))
    text(0, 0, n, col = "white", font = 2)
  })
}

n <- c(10, 6, 12)
types <- c("rainbow", "bruna", "imas")
par(mfrow = c(2, 2))
mapply(FUN = function(z1, z2) {
  piecol(htb.colors(z1, type = z2))
  text(0, 0, z2, col = "white", font = 2)
}, n, types)

}
\keyword{color}
