% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as.htbDb.R
\name{as.htbDb}
\alias{as.htbDb}
\title{Constructor of empty htbDb objects}
\usage{
as.htbDb(db, type)
}
\arguments{
\item{db}{A list. The dataset to be converted into an \code{htbDb} object.}

\item{type}{A string. The type of the resulting \code{htbDb} object
(either one of \code{spike}, \code{event} or \code{analog}).}
}
\value{
An \code{htbDb} object.
Note that normal readout from \code{\link[=htbGetDb]{htbGetDb()}} function is
a list of \code{htbDb} objects, because an htb file can
contain multiple databases at once.
On the other hand, \code{\link[=as.htbDb]{as.htbDb()}} returns just an \code{htbDb} ojbect
(not a list of those objects).
Therefore, some kind of data nesting and/or nest unpacking
may be required to use constructed \code{htbDb} object(s)
in your testing.
}
\description{
Constructs an empty/artificial htbDb object with designated type.
}
\details{
The readout from an .htb file is a list of \code{htbDb} objects
which is the most primitive data in TEMPO system.
Normally you will continue analyzing those extracted data
obtained in your own real-world experiment.
However, there can be times that you want to test your analyses
using artificially constructed spike, event and/or analog data.
This way you can check whether your script is working correctly or not
using virtual data with known properties
(e.g., time locking to some events, difference in firing rates, etc...).

\code{\link[=as.htbDb]{as.htbDb()}} offers an easy way for this kind of
artificial data construction.
It creates an \code{htbDb} object with empty, or
arbitrary artificial data contents provided by the user.
Because \code{htbDb} objects is actually a list with predetermined
properties and naming rules,
\code{\link[=as.htbDb]{as.htbDb()}} receives a list as an input object,
and converts it to an \code{htbDb} object.
Each element of the input list is regarded as
separate channels of constructed \code{htbDb} object
(i.e., spike timings for spike database,
codes of events for event database,
and analog integer values for analog database).

Note that for event databases,
normal \code{\link[=htbGetDb]{htbGetDb()}} function performs data transformation
using character pattern matching (see Details in \code{\link[=htbGetDb]{htbGetDb()}}).
In \code{\link[=as.htbDb]{as.htbDb()}}, however, just pass event names (a vector of strings)
directly in the first element of the input list.
The second element is regarded as
channel with timing information.
}
\examples{
  db_spike <- as.htbDb(replicate(3, {
    cumsum(ceiling(runif(100, 10, 50))) },
    simplify = FALSE),
    type = "spike")

  db_event <- as.htbDb(list(
    c("TRL_START", "EV1", "EV2", "REWARD", "TRL_END"),
    time = cumsum(ceiling(runif(5, 100, 300)))),
    type = "event")

  db_analog <- as.htbDb(replicate(2, {
    cumsum(ceiling(rnorm(2000, sd = 4))) },
    simplify = FALSE), type = "analog")

}
\keyword{IO}
