% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/htbGetHis.R
\name{htbGetHis}
\alias{htbGetHis}
\title{Creator for htbHis object}
\usage{
htbGetHis(
  ras,
  xlim = NULL,
  bin = 200,
  sep = 10,
  type = c("rectangular", "histogram")
)
}
\arguments{
\item{ras}{An \code{htbRas} object of \code{spike} type.}

\item{xlim}{A pair of numerics.
The range \code{c(from, to)} of time to calculate histograms.
When omitted (default), the range of the original \code{htbRas} object
(used in splicing spike sequence during alignment by \code{\link[=htbGetRas]{htbGetRas()}})
was inherited.}

\item{bin}{A numeric.
The temporal width of the sliding window to calculate a histogram.}

\item{sep}{A numeric.
The width of a step of the sliding window.}

\item{type}{A string.
The shape of the sliding window previously used
but currently ignored.}
}
\value{
An \code{htbHis} object.
}
\description{
Creates htbHis object from htbRas objects.
}
\details{
In examining neural activities,
creating a histogram is one of the most elementary starting points.
A histogram visualizes the transition of instantaneous
firing rates of a neuron, calculated by
sequential averaging of number of spikes
with a sliding window of arbitrary width and steps.
For this, you need multiple lines of spike sequence
(normaly the trials in the task) aligned
at a time of certain external event.
Therefore, the source of a histogram is naturally
the data used to create a rastergram,
i.e., \code{htbRas} object in htb package.
\code{\link[=htbGetHis]{htbGetHis()}} does this transformation for a set of spike sequences
packed as an \code{htbRas} object.
Result is returned as a specialized list named \code{htbHis} object,
containing a series of temporally smoothed firing rates
composed of the same set of task conditions with the source \code{htbRas} object.
}
\examples{
alignment <- list(CUEON_L = c(-1500, 2000), CUEON_R = c(-1500, 2000))
incld <- list(TRIALSTART = c(-2000, 0), TRIALEND = c(0, 2000))
excld <- list(ERROR = c(0, 2000))

\dontrun{
db_sp <- htbGetDb("spike.htb")
db_ev <- htbGetDb("event.htb")
ras <- htbGetRas(db_sp, db_ev, alignment,
  incld = incld, excld = excld)
his <- htbGetHis(ras)
}

}
\keyword{utilities}
